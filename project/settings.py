"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from corsheaders.defaults import default_headers
from pathlib import Path
from corsheaders.defaults import default_headers
import os
import logging

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = os.getenv(
#     'ALLOWED_HOSTS',
#     'stage.division16llc.net,stageapi.division16llc.net,72.167.36.196,localhost,127.0.0.1'
# ).split(',')

ALLOWED_HOSTS = ['localhost']

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Application definition

INSTALLED_APPS = [
    'daphne',
    'channels',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'django_filters',
    # 'rest_framework_expiring_authtoken',
    'corsheaders',
    'auditapp',
    'ctrctsapp',
    'crewsapp',
    'appschedule',
    'project',
    'appidentity'
]

MIDDLEWARE = [
    'project.DisableCSRF.DisableCSRF',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Si usas sesiones de autenticación (en lugar de TokenAuthentication), habilita CSRF
CSRF_TRUSTED_ORIGINS = os.getenv(
    'CSRF_TRUSTED_ORIGINS',
    'http://localhost:3000,http://127.0.0.1:3000,https://stage.division16llc.net,https://stageapi.division16llc.net'
).split(',')

# Permitir todas las solicitudes desde el frontend
CORS_ALLOW_ALL_ORIGINS = True  # Para desarrollo, en producción deberías limitar a dominios específicos

# CORS_ALLOWED_ORIGINS = os.getenv(
#     'CORS_ALLOWED_ORIGINS',
#     'http://localhost:3000,http://127.0.0.1:3000,https://stage.division16llc.net,https://stageapi.division16llc.net'
# ).split(',')

CORS_ALLOW_CREDENTIALS = True

# Importar default_headers


CORS_ALLOW_WEBSOCKETS = True

# Permite todos los encabezados CORS estándar
CORS_ALLOW_HEADERS = list(default_headers) + [
    'access-control-allow-origin',
    'X-Custom-Header',
    'X-Requested-With',
    'Authorization',
    'Content-Type'
]

CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
)

REST_FRAMEWORK = {
    # Definir las clases de autenticación por defecto
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',  # Autenticación con tokens
    ],

    # Clases de permisos por defecto (esto afecta las vistas por defecto de DRF)
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',  # Requiere autenticación en todas las vistas
    ],
}

# Asegurarse de que se está utilizando el modelo de usuarios predeterminado de Django
AUTH_USER_MODEL = 'auth.User'

# Usar el backend de permisos de Django
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Backend de autenticación estándar de Django
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'appinventory', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'
ASGI_APPLICATION = "project.asgi.application"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': BASE_DIR / 'db.sqlite3',
#    }
# }

# DATABASES = {
#     'default': {
#         'ENGINE': os.getenv('DB_ENGINE', 'django.db.backends.mysql'),
#         'NAME': os.environ.get('MYSQL_DATABASE', 'chalan_division_stage'),
#         'USER': os.environ.get('MYSQL_USER', 'oliver'),
#         'PASSWORD': os.environ.get('MYSQL_PASSWORD', '13694344Om$'),
#         'HOST': os.environ.get('MYSQL_HOST', 'localhost'),
#         'PORT': os.environ.get('MYSQL_PORT', 3306),
#         'OPTIONS': {
#             'charset': 'utf8mb4',
#         },
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get('MYSQL_DATABASE', 'chalandb'),
        'USER': os.environ.get('MYSQL_USER', 'chalanu'),
        'PASSWORD': os.environ.get('MYSQL_PASSWORD', '12345678'),
        'HOST': os.environ.get('MYSQL_HOST', 'db'),  
        'PORT': os.environ.get('MYSQL_PORT', '3306'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

X_FRAME_OPTIONS = 'SAMEORIGIN'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

logger = logging.getLogger('django.db.backends')
logger.setLevel(logging.DEBUG)
logger.addHandler(logging.StreamHandler())

# Configuración para el envío de correos electrónicos
# Configuración para el envío de correos electrónicos con SendGrid
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.sendgrid.net')
EMAIL_PORT = os.environ.get('EMAIL_PORT',
                            587)  # Usa 465 si prefieres conexión SSL, en cuyo caso ajusta EMAIL_USE_SSL en True y elimina EMAIL_USE_TLS
EMAIL_USE_TLS = True  # Si usas el puerto 587
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'apikey')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD',
                                     'key')  
DEFAULT_FROM_EMAIL = os.environ.get('EMAIL_DEFAULT_FROM', 'oliver@division16llc.com')

FRONT_URL = os.environ.get('FRONT_URL', 'http://192.168.0.248:8080')

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(os.getenv('REDIS_HOST', 'redis'), os.getenv('REDIS_PORT', 6379))],
        },
    },
}

ENABLE_WEBSOCKET_NOTIFICATIONS = True

# LOGGING = {
#     'version': 1,
#     'handlers': {
#         'file': {
#             'level': 'DEBUG',
#             'class': 'logging.FileHandler',
#             'filename': '/var/log/django/debug.log',  # Aquí se guarda el log
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['file'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#     },
# }
